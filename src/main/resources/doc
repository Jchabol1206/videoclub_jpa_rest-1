Keyword
Sample
JPQL snippet
Distinct
findDistinctByLastnameAndFirstname
select distinct …​ where x.lastname = ?1 and x.firstname = ?2
And
findByLastnameAndFirstname
… where x.lastname = ?1 and x.firstname = ?2
Or
findByLastnameOrFirstname
… where x.lastname = ?1 or x.firstname = ?2
Is, Equals
findByFirstname,findByFirstnameIs,findByFirstnameEquals
… where x.firstname = ?1
Between
findByStartDateBetween
… where x.startDate between ?1 and ?2
LessThan
findByAgeLessThan
… where x.age < ?1
LessThanEqual
findByAgeLessThanEqual
… where x.age <= ?1
GreaterThan
findByAgeGreaterThan
… where x.age > ?1
GreaterThanEqual
findByAgeGreaterThanEqual
… where x.age >= ?1
After
findByStartDateAfter
… where x.startDate > ?1
Before
findByStartDateBefore
… where x.startDate < ?1
IsNull, Null
findByAge(Is)Null
… where x.age is null
IsNotNull, NotNull
findByAge(Is)NotNull
… where x.age not null
Like
findByFirstnameLike
… where x.firstname like ?1
NotLike
findByFirstnameNotLike
… where x.firstname not like ?1
StartingWith
findByFirstnameStartingWith
… where x.firstname like ?1 (parameter bound with appended %)
EndingWith
findByFirstnameEndingWith
… where x.firstname like ?1 (parameter bound with prepended %)
Containing
findByFirstnameContaining
… where x.firstname like ?1 (parameter bound wrapped in %)
OrderBy
findByAgeOrderByLastnameDesc
… where x.age = ?1 order by x.lastname desc
Not
findByLastnameNot
… where x.lastname <> ?1
In
findByAgeIn(Collection<Age> ages)
… where x.age in ?1
NotIn
findByAgeNotIn(Collection<Age> ages)
… where x.age not in ?1
True
findByActiveTrue()
… where x.active = true
False
findByActiveFalse()
… where x.active = false
IgnoreCase
findByFirstnameIgnoreCase
… where UPPER(x.firstname) = UPPER(?1)

 @ManyToOne tiene los siguientes atributos:
Optional:
Indica si la relación es opcional, es decir, si el objeto puede ser null.

Esta propiedad se utiliza optimizar las consultas. Si JPA sabe que una relación es opcional, entonces puede realizar un OUTER JOIN  o realizar la consulta por separado, mientras que, si no es opcional, puede realizar un INNER JOIN  para realizar una sola consulta.
Cascade:
Esta propiedad le indica que operaciones en cascada puede realizar con la Entidad relacionada, los valores posibles son ALL , PERSIST , MERGE , REMOVE , REFRESH , DETACH y están definidos en la enumeración javax.persistence.CascadeType.

Si vemos el detalle de las operaciones en cascada de JPA / Hibernate:

CascadeType.ALL: se aplican todos los tipos de cascada.

CascadeType.PERSIST: las operaciones de guardado en la base de datos de las entidades padre se propagarán a las entidades relacionadas.

CascadeType.MERGE: las entidades relacionadas se actualizarán al contexto de persistencia cuando la entidad propietaria se actualice.

CascadeType.REMOVE: las entidades relacionadas se eliminan de la base de datos cuando la entidad propietaria/padre se elimine.

CascadeType.REFRESH: las entidades relacionadas actualizan sus datos desde la base de datos cuando la entidad propietaria se actualiza.

CascadeType.DETACH: se separan del contexto de persistencia todas las entidades relacionadas cuando ocurre una operación de separación manual.


Recomendación de Java Champion Vlad Mihalcea (https://vladmihalcea.com/ ) CascadeType.ALL y @ManyToOne

No debe usar CascadeType.ALL en @ManyToOne ya que las transiciones de estado de entidad deben propagarse de las entidades principales a las secundarias, no al revés.

@ManyToOne está en el lado secundario de la asociación, ya que asigna la columna de clave externa subyacente.

Por lo tanto, debe mover el CascadeType.ALL de la asociación @ManyToOne al lado @OneToMany, que también debe usar el atributo mappedBy, ya que es el mapeo de relación de tabla de uno a muchos más eficiente.





Fetch:
Esta propiedad se utiliza para determinar cómo debe ser cargada la entidad, los valores están definidos en la enumeración javax.persistence.FetchType  y los valores posibles son:

EAGER (ansioso): Indica que la relación debe de ser cargada al momento de cargar la entidad.
LAZY (perezoso): Indica que la relación solo se cargará cuando la propiedad sea leída por primera vez.
targetEntity:
Esta propiedad recibe una clase (Class ) la cual corresponde a la clase de la relación. No suele ser utilizada, pues JPA puede inferir la clase por el tipo de la propiedad.



